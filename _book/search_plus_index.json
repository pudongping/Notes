{"./":{"url":"./","title":"前言","keywords":"","body":"Introduction SELECT * FROM LEARNS WHERE LIVE IS NOT NULL Alex®Artisan, Backend Developer & overall web enthusiastCopyright © Alex all right reservedmodified at: 2020-11-12 09:16:32 "},"doc/frontend-notes/how-to-use-gitbook.html":{"url":"doc/frontend-notes/how-to-use-gitbook.html","title":"GitBook 使用","keywords":"","body":"GitBook 使用 参考文献 GitBook 官网GitBook 文档GitBook 使用教程推荐12个实用的gitbook插件GitBook 和它有趣的插件 使用 安装 安装 GitBook 之前需要安装 Node.js ， GitBook 是一个基于 Node.js 的命令行工具，因此需要先下载安装 Node.js # 查看 node.js 是否安装成功 node -v # 安装 GitBook npm install gitbook-cli -g # 查看 GitBook 是否安装成功 gitbook -V （大写的 V ） 更多详情可以参考 GitBook 官方安装文档 来安装 GitBook 创建项目 # 切换到项目文件夹并创建项目 mkdir project-directory && cd project-directory && gitbook init # 或者直接使用以下命令 gitbook init ./project-directory 启动项目 cd project-directory && gitbook serve 然后在浏览器地址栏中输入 http://localhost:4000 便可预览书籍，至此，gitbook 安装完毕。 编译项目 （生成网页而不开启服务器） cd project-directory && gitbook build 查看所有可用的 gitbook 版本 gitbook ls-remote 安装指定的 gitbook 版本 gitbook fetch beta（版本号） 编译时，输出目录详细的记录包括 debug gitbook build ./ --log=debug --debug 关于配置 配置文件 需要在项目根目录下手动创建 book.json 或者 book.js 文件 配置文件变量 可以参考这篇文章中的介绍：GitBook文档（中文版） 安装插件 安装插件有两种方式： 点我搜索更多 gitbook 插件 在 /book.json 配置文件中写入相应的插件和配置后，使用 gitbook install 命令安装插件 直接使用 npm install gitbook-plugin-pluginname 命令安装指定的插件，然后在 /book.json 配置文件中写入配置，比如安装 highlight 插件时，需要执行 npm install gitbook-plugin-highlight npm install gitbook-plugin-search-pro --registry=https://registry.npm.taobao.org/ GitBook 初始化时，会默认自动下载 7 个插件 highlight ： 代码高亮 search ： 导航栏查询功能 （不支持中文） lunr ： 为 search 插件提供后端支持 sharing ： 右上角分享功能 fontsettings ： 字体设置（最上方的 \"A\" 符号） livereload ： 为 GitBook 实时重新加载 theme-default ： 默认的 3.0.0 版本之后的主题插件 推荐插件 advanced-emoji ： 支持 emoji 表情包 emoji 表情包地址 anchor-navigation-ex ： 悬浮按钮目录 （在页面中增加 标签，会在此处生成 TOC 目录）、还会增加标题锚 auto-scroll-table ： 表格滚动条 audio_image ： 播放音频 back-to-top-button ： 返回顶部 baidu-tongji-with-multiple-channel ： 百度统计插件,支持多渠道独立统计,一份源码多处部署独立统计 chapter-fold ： 左侧目录可折叠，建议和 expandable-chapters 插件一起使用可以互补相互的 bug code ： 代码添加行号和复制按钮 change_girls ： 可自动切换背景 click-reveal ： 点击显示内容，默认把内容已经隐藏 custom-favicon ： 修改标题栏图标 copyright ： 用于复制内容时追加版权信息以及文章末尾添加版权小尾巴 donate ： 打赏功能 diff ： 在 markdown 文档中显示代码之间的差异 expandable-chapters ： 左侧目录可折叠，和 expandable-chapters-small 的区别是： expandable-chapters-small 的折叠图标要小一些 （建议和 chapter-fold 插件一起使用可以互补相互的 bug） edit-link-plus ： 在线编辑文件 flexible-alerts ：警告提示框 favicon ： 修改网站的 favicon.ico 点我在线制作ico图标，建议尺寸32*32 ga ： Google 分析 github ： 右上角添加 Github 图标 github-buttons ： 右上角添加 GitHub 的按钮 gitbook-plugin-charts ： 在 gitbook 中使用图表插件，目前支持 echarts google-tongji-with-multiple-channel ： Google 统计插件,支持多渠道独立统计,一份源码多处部署独立统计 hide-element ： 隐藏元素 image-captions ： 将图片的 alt 或 title 属性转换为标题 insert-logo ： 插入 Logo icp ： 在首页页脚区域添加 icp 网站备案信息 klipse ： 嵌入类似 IDE 的功能 lightbox ： 页面弹窗查看图片 （支持在弹层切换上下图） local-video ： 播放本地视频，点我查看使用教程 multipart ： 将左侧的目录分章节展示 mygitalk ： 通过 GitHub issues 添加评论框 mermaid-gb3 ： 支持 markdown 的流程图 meta ： 添加 meta 头部信息 page-copyright ： 页脚版权 pageview-count ： 阅读统计 popup ： 打开新的页面查看图片 prism ： 代码块颜色插件 （使用的时候需要禁用掉 gitbook 自带的 highlight 插件并且和 code 插件一起使用时，需要放到 code 插件后，否则样式会被覆盖掉） rss ： 生成 rss 如何使用 RSS readmore ： 实现博客的每一篇文章自动增加阅读更多效果,关注公众号后方可解锁全站文章 sharing-plus ： 分享当前页面 splitter ： 侧边栏宽度可调节 search-pro ： 高级搜索，支持中文 （使用的时候需要禁用掉 lunr 和 search 插件） sectionx ： 折叠模块(页面内容可折叠) sitemap-general ： 生成站点地图 simple-mind-map ： 在 markdown 中生成并导出思维导图 todo ： 待做项 theme-fexa : 网站主题，使用这个主题之后不能够在页面上进行上下文翻页 theme-comscore ： 标题和正文颜色有所区分的主题，表格也有颜色 tbfed-pagefooter ： 添加页脚版权信息，这个感觉没有 page-copyright 好用 我自己的 book.json 配置信息 注意：需要删除掉所有的注释信息 { \"title\": \"Alex's Notes\", // 设置书本的标题 \"author\": \"Alex\", // 作者的相关信息 \"description\": \"live and learn\", // 本书的简单描述 \"language\": \"zh-hans\", // 可使用的语言：en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 这里我选择的是简体中文 zh-hans \"gitbook\": \"3.2.3\", // 指定使用的 gitbook 版本 \"styles\": { // 自定义页面样式 \"website\": \"./resources/styles/website.css\", // 当此时的 gitbook 输出为站点模式时使用的 css 样式 // \"ebook\": \"styles/ebook.css\", // 当此时的 gitbook 输出为 ebook 时使用的 css 样式 // \"pdf\": \"styles/pdf.css\", // 当此时的 gitbook 输出为 pdf 时使用的 css 样式 // \"mobi\": \"styles/mobi.css\", // \"epub\": \"styles/epub.css\" }, \"structure\": { // 指定 Readme、Summary、Glossary 和 Languages 对应的文件名 \"readme\": \"README.md\", // 该书的介绍 （默认会创建） \"summary\": \"SUMMARY.md\", // 该书的章节结构 （默认会创建） // \"glossary\": \"GLOSSARY.md\", // 多语言书籍 // \"languages\": \"LANGS.md\", // 术语描述的清单 }, \"links\": { // 在左侧导航栏添加链接信息 \"sidebar\": { \"我的博客\": \"https://drling.xin/\", \"GitHub\": \"https://github.com/pudongping\" } }, \"plugins\": [ // 需要使用的插件列表，注释插件的时候直接在插件名称前加 “横杠 -”，比如注释 “highlight” 插件为 “-highlight” \"-highlight\", \"-lunr\", \"-search\", \"search-pro\", \"-sharing\", \"sharing-plus\", \"fontsettings\", \"livereload\", \"expandable-chapters-small\", \"chapter-fold\", \"splitter\", \"hide-element\", \"back-to-top-button\", \"favicon\", \"insert-logo\", \"pageview-count\", \"code\", \"prism\", \"lightbox\", \"github\", \"github-buttons\", \"donate\", \"anchor-navigation-ex\", \"meta\", \"mygitalk\", \"change_girls\", \"simple-mind-map\", \"image-captions\", \"todo\", \"edit-link-plus\", \"sitemap-general\", \"rss\", \"icp\", \"theme-comscore\", \"page-copyright\" ], \"pluginsConfig\": { \"sharing\": { \"douban\": true, \"facebook\": false, \"google\": true, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": false, \"linkedin\": false, \"messenger\": false, \"pocket\": false, \"qq\": true, \"qzone\": true, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": true, \"whatsapp\": false, \"all\": [ \"douban\", \"facebook\", \"google\", \"hatenaBookmark\", \"instapaper\", \"line\", \"linkedin\", \"messenger\", \"pocket\", \"qq\", \"qzone\", \"stumbleupon\", \"twitter\", \"viber\", \"vk\", \"weibo\", \"whatsapp\" ] }, \"hide-element\": { \"elements\": [ \"a.gitbook-link[href='https://www.gitbook.com']\" ] }, \"favicon\": { \"shortcut\": \"./resources/images/favicon.ico\", \"bookmark\": \"./resources/images/favicon.ico\", \"appleTouch\": \"./resources/images/favicon.png\", \"appleTouchMore\": { \"120x120\": \"./resources/images/apple-touch-icon-120x120.png\", \"180x180\": \"./resources/images/apple-touch-icon-180x180.png\" } }, \"insert-logo\": { \"url\": \"/resources/images/favicon.png\", \"style\": \"background: none; max-height: 30px; min-height: 30px\" }, \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ], \"lang\": { \"shell\": \"bash\" } }, \"lightbox\": { \"sameUuid\": true // 开启了这个属性之后支持在弹层，左右切换图片 }, \"github\": { \"url\": \"https://github.com/pudongping\" // 在右上角会显示很小的 github 的官方图标 }, \"github-buttons\": { // 在右上角会显示 github 图标的 button \"buttons\": [ { \"user\": \"pudongping\", \"repo\": \"glory\", \"type\": \"star\", \"count\": true, \"size\": \"small\" } ] }, \"donate\": { \"alipay\": \"/resources/images/donate.png\", \"title\": \"\\\"若有共鸣，留言足矣，若有赞赏，何以复加？\\\"\", \"button\": \"赞赏\", \"alipayText\": \"微信/支付宝/QQ\" }, \"anchor-navigation-ex\": { \"showLevel\": true, // 右上角浮层目录显示序号 \"showGoTop\": false // 不显示回到顶部的图标，不建议开启这个属性，因为这个图标总是显示，不像 “back-to-top-button” 插件还可以自动显示和隐藏 }, \"meta\": { \"data\": [ { \"name\": \"referrer\", \"content\": \"never\" } ] }, \"mygitalk\": { \"clientID\": \"\", // GitHub 开发者设置，客户端连接标识 \"clientSecret\": \"\", // GitHub 开发者设置，客户端秘钥 \"repo\": \"\", // GitHub 仓库名 \"owner\": \"\", // GitHub 仓库所有者 \"admin\": [ // GitHub 仓库管理者，支持多个管理者 \"admin-1\", \"admin-2\" ], \"distractionFreeMode\": false // 类似 Facebook 评论框的全屏遮罩效果,默认值: false }, \"change_girls\": { \"time\": 5, // 每 5 秒切换一次背景 \"urls\": [ \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1605033246957&di=d6170f1a9f0466f270ad1baee847eab9&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2Fe%2F55f26f55e9138.jpg\", \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1605033334002&di=4ef73db6c98fb737f5a3068670160056&imgtype=0&src=http%3A%2F%2Fww3.sinaimg.cn%2Flarge%2Fd2e27164gw1fbmwbgf0mij21hc0u0487.jpg\" ] }, \"simple-mind-map\": { \"type\": \"markdown\", \"preset\": \"colorful\", \"linkShape\": \"diagonal\", \"autoFit\": true }, \"image-captions\": { \"caption\": \"sugaryesp 的笔记 - _PAGE_LEVEL_._PAGE_IMAGE_NUMBER_ - _CAPTION_\" }, \"edit-link-plus\": { \"base\": { \"edit-link-name-1\": \"edit-link-1\", \"edit-link-name-2\": \"edit-link-2\" }, \"defaultBase\": \"\", // 这里填写链接地址 \"label\": \"编辑本页\" }, \"sitemap-general\": { \"prefix\": \"http://notes.drling.xin/\" }, \"rss\": { \"title\": \"sugaryesp 的笔记\", \"description\": \"削个椰子皮_给个梨的笔记\", \"author\": \"Alex\", \"site_url\": \"http://notes.drling.xin\", \"feed_url\": \"http://notes.drling.xin/rss\", \"managingEditor\": \"276558492@qq.com (Alex Pu)\", \"webMaster\": \"276558492@qq.com (Alex Pu)\", \"categories\": [ \"markdown\", \"git\", \"gitee\", \"github\", \"php\", \"python\", \"vue.js\" ] }, \"icp\": { \"number\": \"鄂ICP备18004705号\", \"link\": \"https://beian.miit.gov.cn/\" }, \"page-copyright\": { \"description\": \"modified at:\", \"signature\": \"Alex\", \"wisdom\": \"Artisan, Backend Developer & overall web enthusiast\", \"format\": \"YYYY-MM-dd hh:mm:ss\", \"copyright\": \"Copyright &#169; Alex\", \"timeColor\": \"#666\", \"copyrightColor\": \"#666\", \"utcOffset\": \"8\", \"style\": \"normal\", \"noPowered\": true, \"baseUri\": \"http://notes.drling.xin/\" } } } 如果使用 gitbook install 安装插件太慢，可以使用 npm init 初始化项目，然后再使用 npm install 安装插件 cd project-directory && npm init // 比如安装 livereload 插件 npm install gitbook-plugin-livereload 这是我的 package.json { \"name\": \"glory\", \"version\": \"1.0.0\", \"description\": \"Alex's notes\", \"main\": \" \", \"dependencies\": { \"gitbook-plugin-anchor-navigation-ex\": \"^1.0.14\", \"gitbook-plugin-back-to-top-button\": \"^0.1.4\", \"gitbook-plugin-change_girls\": \"^2.2.1\", \"gitbook-plugin-chapter-fold\": \"^0.0.4\", \"gitbook-plugin-code\": \"^0.1.0\", \"gitbook-plugin-donate\": \"^1.0.2\", \"gitbook-plugin-edit-link-plus\": \"^0.1.1\", \"gitbook-plugin-expandable-chapters-small\": \"^0.1.7\", \"gitbook-plugin-favicon\": \"^0.0.2\", \"gitbook-plugin-fontsettings\": \"^2.0.0\", \"gitbook-plugin-github\": \"^2.0.0\", \"gitbook-plugin-github-buttons\": \"^3.0.0\", \"gitbook-plugin-hide-element\": \"^0.0.4\", \"gitbook-plugin-icp\": \"^0.1.2\", \"gitbook-plugin-image-captions\": \"^3.1.0\", \"gitbook-plugin-insert-logo\": \"^0.1.5\", \"gitbook-plugin-lightbox\": \"^1.2.0\", \"gitbook-plugin-livereload\": \"0.0.1\", \"gitbook-plugin-meta\": \"^0.1.12\", \"gitbook-plugin-mygitalk\": \"^0.2.6\", \"gitbook-plugin-page-copyright\": \"^1.0.8\", \"gitbook-plugin-pageview-count\": \"^1.0.1\", \"gitbook-plugin-prism\": \"^2.4.0\", \"gitbook-plugin-rss\": \"^3.0.2\", \"gitbook-plugin-search-pro\": \"^2.0.2\", \"gitbook-plugin-sharing-plus\": \"^0.0.2\", \"gitbook-plugin-simple-mind-map\": \"^0.2.4\", \"gitbook-plugin-sitemap-general\": \"^0.1.1\", \"gitbook-plugin-splitter\": \"^0.0.8\", \"gitbook-plugin-theme-comscore\": \"0.0.3\", \"gitbook-plugin-todo\": \"^0.1.3\" }, \"devDependencies\": {}, \"scripts\": { \"test\": \" \" }, \"repository\": { \"type\": \"git\", \"url\": \"git+https://github.com/pudongping/glory.git\" }, \"keywords\": [ \"Artisan\" ], \"author\": \"Alex\", \"license\": \"MIT\", \"bugs\": { \"url\": \"https://github.com/pudongping/glory/issues\" }, \"homepage\": \"https://github.com/pudongping/glory#readme\" } Alex®Artisan, Backend Developer & overall web enthusiastCopyright © Alex all right reservedmodified at: 2020-11-11 17:07:26 "},"doc/git-notes/install-gogs-by-windows.html":{"url":"doc/git-notes/install-gogs-by-windows.html","title":"windows 下搭建 git 服务器 gogs","keywords":"","body":"本文基于 windows7 64位 搭建 gogs gogs 官方文档地址：https://gogs.io/docs软件下载地址：https://dl.gogs.io/ 环境要求 数据库（选择以下一项）： MySQL：版本 >= 5.7 PostgreSQL MSSQL TiDB（实验性支持，使用 MySQL 协议连接） 或者 什么都不安装 直接使用 SQLite3 git（bash）： 服务端和客户端均需版本 >= 1.7.1 Windows 系统建议使用最新版 SSH 服务器： 如果您只使用 HTTP/HTTPS 的话请忽略此项 如果您选择在 Windows 系统使用内置 SSH 服务器，请确保添加 ssh-keygen 到您的 %PATH% 环境变量中 推荐 Windows 系统使用 Cygwin OpenSSH 或 Copssh Windows 系统 请确保 Bash 是默认的 Shell 程序，而不是 PowerShell 所需软件 必须软件 NSSM git 最好下载最新版 MySQL 官方说的是版本需要大于5.7，我的版本是 5.5.3 发现也并无影响。但是存储引擎一定要使用：INNODB！ gogs软件包 windows-64位版本 安装 将下载的 gogs_0.11.86_windows_amd64.zip 压缩包文件解压。 本文解压在 E:\\soft-exe 目录下 创建数据库 可以直接去执行 E:\\soft-exe\\gogs\\scripts\\mysql.sql 文件，创建 gogs 数据库。（当然也可以自己去创建数据库名为 gogs 的数据库，但是建议还是直接执行 mysql.sql 脚本，毕竟官方建议） mysql.sql 中的内容为以下： SET GLOBAL innodb_file_per_table = ON, innodb_file_format = Barracuda, innodb_large_prefix = ON; DROP DATABASE IF EXISTS gogs; CREATE DATABASE IF NOT EXISTS gogs CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; 安装 git 这个貌似没有什么太多需要讲的，直接根据上面提供的链接地址下载 git 最新版，之后一直下一步安装即可。 注册 gogs 服务 修改 E:\\soft-exe\\gogs\\scripts\\windows\\install-as-service.bat ,将其中的 SET gogspath=C:/gogs 修改成你本地的 gogs 安装路径。 解压缩 nssm 压缩包。 以管理员权限运行 install-as-service.bat 同样也可以使用手动执行命令去执行 install-as-service.bat 文件手动执行命令的方法为：在 install-as-service.bat 文件所在文件夹下，随便点击一下空白处，然后按住 shift键，点击鼠标右键，点击 在此处打开命令窗口 输入 gogs web 命令，回车即可。 测试 浏览器访问：127.0.0.1:3000 即可进入配置页面（我只修改了代码仓库存放路径这一项）。（在此页面并不一定非要注册用户，我测试的时候，虽然注册了一个用户，但是最后发现还是需要再重新注册）完成配置后，E:\\soft-exe\\gogs\\custom\\conf 目录下会生成一个新的 app.ini 配置文件。 注册用户（系统默认第一个用户为系统管理员） 再次访问 127.0.0.1:3000 ，点击注册。 创建测试仓库 Alex®Artisan, Backend Developer & overall web enthusiastCopyright © Alex all right reservedmodified at: 2020-11-12 09:20:40 "},"doc/git-notes/install-gogs-by-centos7.html":{"url":"doc/git-notes/install-gogs-by-centos7.html","title":"CentOS 7 搭建 gogs Git 服务器","keywords":"","body":" CentOS 7 搭建 gogs Git 服务器 本地环境如下： Linux 系统环境为：CentOS Linux release 7.4.1708 (Core)MySQL 版本为： mysql Ver 14.14 Distrib 5.7.23, for Linux (x86_64) using EditLine wrapperGit 版本为： git version 1.8.3.1Gogs 当前最新版本为：0.11.86 所需软件 Gogs Git MySQL 安装步骤 创建用户名为 git 的账户，用于管理 git sudo adduser git 切换到 git 用户，并在其账户所在家目录，下载 Gogs // 切换到 git 用户 su git // 切换到 git 用户所在家目录 cd ~ // 下载 gogs 压缩包 wget https://dl.gogs.io/0.11.86/gogs_0.11.86_linux_amd64.tar.gz // 解压缩 （解压缩之后的文件夹名为 gogs ） tar -zxvf gogs_0.11.86_linux_amd64.tar.gz 执行 gogs 数据库文件 // 切换到 /home/git/gogs/scripts 目录 cd /home/git/gogs/scripts // 登录数据库 （这里采用 MySQL ） mysql -u root -p // 创建 gogs 用户 create user 'gogs'@'localhost' identified by '密码'; // 赋予 gogs 数据库用户能够访问 gogs 数据库所有权限 grant all privileges on gogs.* to 'gogs'@'localhost'; // 刷新权限 flush privileges; // 执行 gogs 数据库脚本文件 source mysql.sql // 测试（执行完了之后可以看到已经创建好了 gogs 数据库） show databases; 配置与运行 打开 gogs 文件 vim /home/git/gogs/scripts/init/centos/gogs 核对文件信息 19 PATH=/sbin:/usr/sbin:/bin:/usr/bin 20 DESC=\"Gogs\" 21 NAME=gogs 22 SERVICEVERBOSE=yes 23 PIDFILE=/var/run/$NAME.pid 24 SCRIPTNAME=/etc/init.d/$NAME 25 WORKINGDIR=/home/git/gogs # 仓库地址，可以自行修改 26 DAEMON=$WORKINGDIR/$NAME 27 DAEMON_ARGS=\"web\" 28 USER=git # 如果运行 gogs 不是名为 git 的账户，则需要修改。 # 如是用 root 账户运行 gogs，则这里修改成 root 切换到 root 账户，然后复制到 /etc/init.d/ 目录下 // 切换到 root 账户 su root // 将 gogs 文件复制到 /etc/init.d 目录下 sudo cp /home/git/gogs/scripts/init/centos/gogs /etc/init.d/ 增加执行权限 sudo chmod +x /etc/init.d/gogs 复制 service cp /home/git/gogs/scripts/systemd/gogs.service /etc/systemd/system/ 开启 gogs 服务 service gogs start 运行 gogs web // 切换到 gogs 目录 cd /home/git/gogs // 运行 gogs web （如果此时 Ctrl + C 关闭掉命令，此时刷新浏览器时，会无内容） // 执行命令后，看到有日志输出，则证明启动成功！ ./gogs web // 后台运行 gogs ./gogs web >/dev/null 2>&1 & 必须开启 3000 端口 （我使用的是阿里云的 ECS ，直接在阿里云后台添加 3000 的安全组规则即可） 测试。（ 浏览器访问 http:// 远程主机 IP 地址 :3000 ） 配置反向代理 在 nginx 配置文件夹中，新建 git.drling.xin.conf 文件 vim /etc/nginx/conf.d/git.drling.xin.conf 填入以下内容 server { listen 80; server_name git.drling.xin; location / { proxy_pass http://127.0.0.1:3000/; } } 关于自定义配置 第一次访问 http:// 远程主机 IP 地址 :3000 的时候，会提示你填入一些自定义项，这些自定义项会在你 /custom/conf/app.ini 文件中，只有你在网页中填入自定义项之后才会有此文件。你也可以先在你 gogs 目录下创建 custom/conf/app.ini 文件，然后填入自定义项，如下所示： APP_NAME = Semir-git # 这里的用户名在 Linux 系统中必须存在，且这里的用户名为 ssh 仓库地址的用户名 RUN_USER = git RUN_MODE = prod # 代码仓库地址 [repository] ROOT = /extend-disk/partition2/git-repositories # if you use nginx to proxy, suggest you set 127.0.0.1, otherwise you set 0.0.0.0 is ok HTTP_ADDR = 127.0.0.1 [database] DB_TYPE = mysql HOST = 127.0.0.1:3306 NAME = gogs USER = gogs PASSWD = 123456 SSL_MODE = disable PATH = data/gogs.db [server] # 仓库域名如：git.drling.xin DOMAIN = 10.90.60.6 HTTP_PORT = 3000 # 仓库 url 如：http://git.drling.xin/ ROOT_URL = http://10.90.60.6:3000/ DISABLE_SSH = false SSH_PORT = 22 START_SSH_SERVER = false OFFLINE_MODE = false [mailer] ENABLED = false [service] REGISTER_EMAIL_CONFIRM = false ENABLE_NOTIFY_MAIL = false DISABLE_REGISTRATION = false ENABLE_CAPTCHA = true REQUIRE_SIGNIN_VIEW = false [picture] DISABLE_GRAVATAR = false ENABLE_FEDERATED_AVATAR = false [session] PROVIDER = file [log] MODE = console, file LEVEL = Info ROOT_PATH = /extend-disk/partition2/software/gogs/log [security] INSTALL_LOCK = true SECRET_KEY = 3WWzvF7wpDsBvvP Alex®Artisan, Backend Developer & overall web enthusiastCopyright © Alex all right reservedmodified at: 2020-11-12 09:46:04 "},"doc/docker-notes/install-docker-by-windows.html":{"url":"doc/docker-notes/install-docker-by-windows.html","title":"windows10 专业版 64位系统安装docker并使用 laradock 搭建 laravel 环境","keywords":"","body":" windows10 专业版 64位系统安装docker docker官网docker官网安装文档 安装说明 windows 10 系统需要开启 Hyper-V 开启方式如下图： 打开控制面板-程序-程序和功能-启用或关闭 windows 功能 找到有关 Hyper-V 的项，全部选中 如果发现关于 Hyper-V 的选项无法开启，那么就需要进入 bios 开启虚拟化。开启方法见如下链接： 如何查看自己的Win10电脑是否能运行Hyper-V虚拟机 查看 Hyper-V 固件中启用的虚拟化是否开启的步骤：Win + R 输入 “msinfo32 ” 即可看到“系统信息”窗口。进入 bios 开启固件虚拟化的方法步骤：进入 bios 设置界面，切换到 Advanced 标签，选中 CPU Configuration 设置 Intel Virtualization Technology 为 Enabled。（不同的主板可能会有不同的设置方法，主要是将 Intel Virtualization Technology 设置为 Enabled 即可） 再次打开【启用或关闭 windows 功能界面】开启 Hyper-V 所有选项。 下载 Docker Desktop for Windows desktop app 下载 Docker Desktop for Windows app Docker Desktop Installer.exe 下载安装地址 下载完成之后，直接双击安装 开启 docker 直接可以通过小娜助手搜 docker 关键词，然后启动 Docker Desktop，不管怎样，主要是找到 Docker Desktop 应用，打开就好。 查看 docker 开启状态。 初次安装时，可能会提示你登录 docker 的账号，如果没有 docker 账号的话，可以去 docker 官网注册一下。 测试安装。 任意位置打开 Windows PowerShell // 查看 docker 版本 docker --version docker-compose --version docker run hello-world 使用 laradock 搭建项目 将 laradock 项目代码克隆到本地： git clone https://github.com/Laradock/laradock.git 进入 laradock 目录将 env-example 复制一份并命名为 .env cp env-example .env 运行容器 （此时在 laradock 目录下） docker-compose up -d nginx mysql redis workspace 如果指定端口已经被占用，运行上述命令会报错，关闭相应的服务再重新运行上述命令即可。 注：安装过程中，由于某些资源需要翻墙才能下载，建议安装并启用 VPN 后再执行上述命令。如果出现需要认证的下载资源无权下载，可以通过 Docker ID/密码 登录到 Docker 应用（点击状态栏 Docker 应用小图标就能看到登录菜单），注意这里必须用 Docker ID，不能用注册邮箱。在 Windows 下如果出现目录挂载失败，可以尝试在 Docker 设置中重新设置 Shared Drives。 打开项目的 .env 文件并添加如下配置： DB_HOST=mysql REDIS_HOST=redis QUEUE_HOST=beanstalkd 在和 laradock 同级目录下新建 wwwroot 目录，用于存放代码 新建 demo 文件夹，并写入 phpinfo(); 到 index.php 作为测试。 此时需要再次在 .env 文件中修改 APPLICATION 配置项（新版本的 laradock 对应的配置项是 APP_CODE_PATH_HOST） APPLICATION=../wwwroot/ 这样就相当于为 wwwroot 与 Docker 的 /var/www 目录建立了软连接，然后我们修改 nginx 的配置文件，建立映射关系。 // 复制一份配置文件 demo.conf cp ./laradock/nginx/sites/default.conf ./laradock/nginx/sites/demo.conf 修改成以下内容 server { listen 80; listen [::]:80; server_name demo.test; root /var/www/demo; index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php$is_args$args; } location ~ \\.php$ { try_files $uri /index.php =404; fastcgi_pass php-upstream; fastcgi_index index.php; fastcgi_buffers 16 16k; fastcgi_buffer_size 32k; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; #fixes timeouts fastcgi_read_timeout 600; include fastcgi_params; } location ~ /\\.ht { deny all; } location /.well-known/acme-challenge/ { root /var/www/letsencrypt/; log_not_found off; } } 重启 Docker 的 Nginx docker-compose up -d nginx 在 hosts 文件中添加 （Windows 下对应文件路径是 C:\\Windows\\System32\\drivers\\etc\\hosts） 127.0.0.1 demo.test 在浏览器中访问 demo.test 安装多项目。比如搭建 laravel 项目 在 wwwroot 目录下执行 composer 命令 （需要提前在 Windows 环境中安装 composer） 可以查看我写的这篇文章 Windows安装composer composer create-project laravel/laravel blog --prefer-dist 目录结构如下： 添加 nginx 配置文件追加 hosts 配置 重启 docker 中的 nginx docker-compose up -d nginx 彩蛋 进入Workspace 容器, 执行比如(Artisan, Composer, PHPUnit, Gulp, ...)等命令 docker-compose exec workspace bash 或者 docker exec -it laradock_workspace_1 bash 列出正在运行中的容器 docker ps 关闭所有正在运行的容器 docker-compose stop 进入 mysql 容器 docker-compose exec mysql bash 退出容器 exit 参考文献： laradock中文文档 laravel 学院 laravel 学院 Alex®Artisan, Backend Developer & overall web enthusiastCopyright © Alex all right reservedmodified at: 2020-11-12 10:09:40 "}}